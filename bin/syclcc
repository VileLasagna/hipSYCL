#!/usr/bin/python3

'''
 *
 * This file is part of hipSYCL, a SYCL implementation based on CUDA/HIP
 *
 * Copyright (c) 2018,2019 Aksel Alpay
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 '''


import sys
import subprocess
import os
import tempfile
import os.path
from shutil import copyfile
import binascii
import shutil


def is_program_executable(cmd):
  try:
    subprocess.call([cmd], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    return True
  except:
    return False

def is_source_file(arg):
  if not arg.startswith("-"):
    for ending in cpp_files:
      if arg.lower().endswith(ending):
        return True
  return False

def get_first_working_command(command_list):
  for cmd in command_list:
    if is_program_executable(cmd):
      return cmd
  return None



## Represents the different available HIP installations:
#  * bundled: The HIP installation that comes with hipSYCL
#  * systemwide: The HIP installation that is installed on the system (if present)
#  * hipCPU: The hipCPU HIP implementation for CPUs that comes with hipSYCL
class hip_installation:
  BUNDLED = "bundled"
  SYSTEMWIDE = "system"
  HIPCPU = "hipCPU"

## Represents the different supported hipSYCL platforms
class hipsycl_platform:
  CUDA_CLANG = "cuda"
  CUDA_NVCC = "nvcc"
  ROCM = "rocm"
  HIPCPU = "hipcpu"

  def from_string(platform_name):
    name = platform_name.lower()
    if name == "cuda" or name == "nvidia":
      return hipsycl_platform.CUDA_CLANG
    elif name == "nvcc":
      return hipsycl_platform.CUDA_NVCC
    elif name == "rocm" or name == "amd" or name == "hcc" or name == "hip":
      return hipsycl_platform.ROCM
    elif name == "cpu" or name == "host" or name == "hipcpu":
      return hipsycl_platform.HIPCPU
    else:
      return None



## Implements the source-to-source transformation toolchain that
#  should be invoked before code gets fed into nvcc/hcc/host compiler.
#  It consists of two major steps:
#  1.) All include statements in a source file are recursively expanded
#      so that we obtain one file containing all code required for the
#      compilation of this source file. This is handled by the
#      hipsycl_rewrite_includes program
#  2.) hipsycl_transform_source is invoked to process the source file
#      and turn it into proper HIP/CUDA code, e.g. by adding __device__,
#      __host__ attributes where needed.
class source_file_processor:

  def __init__(self, config, suffix, additional_args=[]):
    self._managed_files = []
    self._managed_directories = []
    self._suffix = suffix
    self._do_cleanup = not config.keep_temporaries()
    self._config = config

    # We strip all arguments that are not relevant to
    # the source transformation, since this may be arguments
    # for the device compiler nvcc/hcc that are unknown to
    # regular clang. For the source transformation, the only
    # arguments that may play a role are preprocessor definitions,
    # include paths, std flags and filenames
    includeNext = False;
    self._additional_args = []
    for arg in additional_args:
      if(arg.startswith("-isystem")):
        includeNext=True
        self._additional_args.append(arg)
        continue
      if (arg.startswith("-std=") or
          arg.startswith("-I") or
          arg.startswith("-D") or
          not arg.startswith("-") or
          includeNext):
        self._additional_args.append(arg)
        includeNext = False


  def _run_source_transformation(self, input_file_path, output_dir):
    source_transform_tool = os.path.join(self._config.hipsycl_binary_path,"hipsycl_transform_source")
    inclusion_rewriter_tool = os.path.join(self._config.hipsycl_binary_path,"hipsycl_rewrite_includes")
    hipcpu_include_dir = os.path.join(self._config.hipsycl_include_path, "hipSYCL")

    transform_filename = self._get_temp_filename(output_dir, self._suffix)

    if not self._config.is_bootstrap():
      rewrite_filename = self._get_temp_filename(output_dir, ".cpp")

      returnvalue = subprocess.call(
        [inclusion_rewriter_tool,
         input_file_path, "--",
         "-I" + os.path.dirname(input_file_path),
         "-I" + hipcpu_include_dir,
         "-DHIPCPU_NO_OPENMP",
         "-Wno-unused-command-line-argument",
         "--hipsycl-transform-dir="+output_dir,
         "--hipsycl-main-output-file="+rewrite_filename]
         +self._additional_args
         +self._config.hipsycl_common_arguments
         +["--rewrite-include-paths="+p for p in self._config.device_header_paths])

      if returnvalue != 0:
        raise RuntimeError("Error while rewriting includes, aborting compilation")

      returnvalue = subprocess.call(
        [source_transform_tool,
         os.path.join(output_dir, rewrite_filename),
         "--",
         "-I" + os.path.dirname(input_file_path),
         "-I" + hipcpu_include_dir,
         "-DHIPCPU_NO_OPENMP",
         "-Wno-unused-command-line-argument",
         "--hipsycl-transform-dir="+output_dir,
         "--hipsycl-main-output-file="+transform_filename]
         +(["--with-template-pruning"] if self._config.platform_needs_template_pruning else [])
         +self._additional_args
         +self._config.hipsycl_common_arguments)

      if returnvalue != 0:
        raise RuntimeError("Error during source-to-source transformation, aborting compilation.")
    else:
      self._copy_file(input_file_path, os.path.join(output_dir,transform_filename))

    return transform_filename

  def process_file(self,filename):
    working_dir = self._get_temp_directory()
    os.makedirs(working_dir)

    output_file = self._run_source_transformation(os.path.abspath(filename), working_dir)
    full_output_path = os.path.join(working_dir, output_file)

    if not os.path.exists(full_output_path):
      raise RuntimeError("source-to-source transformation: Expected output file isn't present.")

    return full_output_path

  def release_files(self):
    if self._do_cleanup:
      for filename in self._managed_files:
        # ToDo: Check If file exists
        os.remove(filename)
      for dirname in self._managed_directories:
        shutil.rmtree(dirname)

  def _get_random_id(self):
    return "hipsycl_"+binascii.b2a_hex(os.urandom(8)).decode("utf-8")

  def _get_temp_directory(self):
    system_tempdir = tempfile.gettempdir()
    tempdir = os.path.join(system_tempdir, self._get_random_id())
    self._managed_directories.append(tempdir)
    return tempdir

  def _get_temp_filename(self, parent_directory, suffix):
    tempfile = self._get_random_id()+suffix
    self._managed_files.append(os.path.join(parent_directory, tempfile))
    return tempfile

  def _copy_file(self,filename,new_filename):
    prepend_data = "#line 1 \""+filename+"\"\n"

    with open(filename, 'r') as original:
      original_data = original.read()

    with open(new_filename, "w") as modified:
      modified.write(prepend_data + original_data)
      modified.close()



cpp_files = set([".cpp",".cxx",".c++",".cc",".c"])

## Compiler backend for CUDA using Clang
class cuda_clang_compiler:
  def __init__(self,config):
    self.device_compiler = config.cuda_clang_compiler
    self.config = config
    self.is_clang_available = is_program_executable(self.device_compiler)

  def includes_linking_stage(self, args):
    for arg in args:
      if (arg.startswith("-E") or
          arg.startswith("-fsyntax-only") or
          arg.startswith("-S") or
          arg.startswith("-c")):
        return False
    return True

  def run(self, args):
    source_processor = source_file_processor(self.config, ".cu", args)
    result = None
    try:
      transformed_args = []
      extra_include_paths = set()
      for arg in args:
        if is_source_file(arg):
          transformed_args.append(source_processor.process_file(arg))
          extra_include_paths.add(os.path.dirname(arg))
        else:
          transformed_args.append(arg)

      gpu_target_arch = self._get_gpu_target_arch(args)
      compiler_args = ["--cuda-gpu-arch="+gpu_target_arch] if gpu_target_arch else []
      compiler_args += ["-std=c++14",
                        "-pthread",
                        "-Wno-unused-command-line-argument",
                        "-Wno-deprecated-declarations"]
      compiler_args += ["-I%s" % path for path in extra_include_paths]

      compiler_args += self.config.hipsycl_common_arguments
      compiler_args += transformed_args

      # To avoid warnings only add linker flags if this run will invoke the linker
      # TODO: This mechanism could also be used to conditionally link libhipSYCL
      if self.includes_linking_stage(args):
        compiler_args += ["-lcudart_static",
                           "-ldl",
                           "-lrt"]

      result = subprocess.call([self.device_compiler]+compiler_args)

    finally:
      source_processor.release_files()

    return result

  # Multiple architectures can be targeted with a single Clang invocation.
  # If the HIPSYCL_GPU_ARCH environment variable is set, it is passed as
  # an architecture alongside any additional arguments passed by the user.
  # If no arguments are passed and the environment variable is not set,
  # a default value is returned.
  def _get_gpu_target_arch(self, args):
    if self.config.gpu_target_arch != None:
      return self.config.gpu_target_arch
    has_arch_arg = False
    for arg in args:
      if arg.startswith("--cuda-gpu-arch="):
        has_arch_arg = True
        break
    return "sm_52" if not has_arch_arg else None

  def is_available(self):
    return self.is_clang_available


## Compiler backend for CUDA using nvcc
# TODO: Honor the HIPSYCL_GPU_ARCH environment variable
class cuda_nvcc_compiler:
  def __init__(self,config):
    self.device_compiler = "nvcc"
    self.config = config

    self.global_options = ["-I","-L","-l", "-D"]
    self.is_nvcc_available = is_program_executable(self.device_compiler)

    if self.is_nvcc_available:
      self.nvcc_option_output = self.get_nvcc_arguments()
    else:
      self.nvcc_option_output = ""


  def get_nvcc_arguments(self):
    return subprocess.check_output([self.device_compiler, "--help"]).decode("utf-8")


  def is_no_nvcc_argument(self,arg):
    return not arg in self.nvcc_option_output


  def obtain_linker_arguments(self, linker_args):
    if not linker_args.startswith("-Wl,"):
      return [linker_args]
    else:
      args = linker_args.replace("-Wl,","",1).split(",")

      result = []
      for arg in args:
        result.append("-Xlinker")
        result.append(arg)
      return result


  def transform_argument(self,arg):
    if arg.startswith("-"):
      for opt in self.global_options:
        if arg.startswith(opt):
          return [arg]
        else:
          if self.is_no_nvcc_argument(arg):
            if arg.startswith("-Wl,"):
              return self.obtain_linker_arguments(arg)
            else:
              return ["-Xcompiler",arg]
    return [arg]

  def run(self, args):
    source_processor = source_file_processor(self.config, ".cu", args)
    result = None
    try:
      transformed_args = []
      extra_include_paths = set()
      for arg in args:
        if is_source_file(arg):
          transformed_args.append(source_processor.process_file(arg))
          extra_include_paths.add(os.path.dirname(arg))
        else:
          transformed_args += self.transform_argument(arg)

      compiler_args = ["--expt-extended-lambda",
                        "--expt-relaxed-constexpr",
                        "-Wno-deprecated-declarations"]
      compiler_args += ["-I%s" % path for path in extra_include_paths]
      compiler_args += self.config.hipsycl_common_arguments
      compiler_args += transformed_args

      result = subprocess.call([self.device_compiler]+compiler_args)

    finally:
      source_processor.release_files()

    return result

  def is_available(self):
    return self.is_nvcc_available

## Compiler backend using hcc
class hip_compiler:
  def __init__(self, config):
    self.device_compiler = "hcc"
    self.is_hcc_available = (is_program_executable(self.device_compiler) and
                             is_program_executable("hcc-config") and
                             is_program_executable("hipconfig"))
    self.hcc_options = []
    self.config = config

    if self.is_hcc_available:
      self.hcc_options = self._get_config()


  def run(self, args):
    source_processor = source_file_processor(self.config, ".cpp", args)
    result = None
    try:

      transformed_args = []
      extra_include_paths = set()
      for arg in args:
        if is_source_file(arg):
          transformed_args.append(source_processor.process_file(arg))
          extra_include_paths.add(os.path.dirname(arg))
        else:
          transformed_args.append(arg)

      compiler_args = ["-Wno-unused-command-line-argument",
                        "-Wno-ignored-attributes",
                        "-std=c++14"]+self.hcc_options
      compiler_args += ["-I%s" % path for path in extra_include_paths]
      compiler_args += self.config.hipsycl_common_arguments
      compiler_args += transformed_args

      result = subprocess.call([self.device_compiler]+compiler_args)

    finally:
      source_processor.release_files()

    return result

  def _get_config(self):
    cxxconfig = subprocess.check_output(["hcc-config","--cxxflags"]).decode("utf-8")
    ldconfig = subprocess.check_output(["hcc-config","--ldflags"]).decode("utf-8")
    rocmpath = subprocess.check_output(["hipconfig","-p"]).decode("utf-8")
    hip_lib_path = os.path.join(rocmpath, "lib")

    additional_args = []
    if self.config.gpu_target_arch != None:
      additional_args.append("-amdgpu-target="+self.config.gpu_target_arch)

    # ToDo: What if the hcc include/library paths in cxxconfig and ldconfig
    # contain spaces?
    return cxxconfig.split()+ldconfig.split()+["-L"+hip_lib_path,
                                               "-lhip_hcc"]+additional_args

  def is_available(self):
    return self.is_hcc_available

## Compiler backend using a regular host compiler in conjunction
#  with the hipCPU HIP implementation for CPUs
class hipcpu_compiler:
  def __init__(self, config):
    self.config = config
    self.compiler = self._get_host_compiler()

  def run(self, args):
    source_processor = source_file_processor(self.config, ".cpp", args)
    result = None
    try:
      transformed_args = []
      extra_include_paths = set()
      for arg in args:
        if is_source_file(arg):
          transformed_args.append(source_processor.process_file(arg))
          extra_include_paths.add(os.path.dirname(arg))
        else:
          transformed_args.append(arg)

      compiler_args = ["-Wno-unused-command-line-argument",
                        "-Wno-ignored-attributes",
                        "-std=c++14",
                        "-fopenmp"]
      compiler_args += ["-I%s" % path for path in extra_include_paths]
      compiler_args += self.config.hipsycl_common_arguments
      compiler_args += transformed_args

      result = subprocess.call([self.compiler]+compiler_args)

    finally:
      source_processor.release_files()

    return result

  def _get_host_compiler(self):
    if "CXX" in os.environ:
      return os.environ["CXX"]
    else:
      return get_first_working_command(["g++"] + self.config.clang_versions_descending)

  def is_available(self):
    return self.compiler != None

## Manages the configuration of the syclcc compiler wrapper;
#  in particular evaluates command line arguments targeted
#  at syclcc itself that should not be forwarded to the actual
#  compiler.
#  Supported arguments are:
#  --force-alternative-compiler=<compiler>  Use the specified compiler
#               directly without going through the hipSYCL toolchain
#  --cuda-clang-compiler=<compiler>  Use an alternative version of Clang
#               for compiling CUDA (defaults to the newest version of
#               clang++ that can be found)
#  --keep-temporary-files Keep temporary files created by the hipSYCL
#               source-to-source transformation; this can be useful
#               for debugging
#  --hipsycl-bootstrap  Enter bootstrap mode; do not perform source-to-
#               source transformation. This is normally only required
#               when building hipSYCL itself.
#  --hipsycl-platform=<platform>  Build the program for the specified
#               hipSYCL platform; valid values are: cuda,nvcc,rocm,cpu
#  --restrict-device-header-path=<path>,
#  -RDI=<path>  Restrict the paths in which include
#               files are allowed to contain device code. Can be specified
#               several times.
#  --help       Print help message
class syclcc_config:
  def __init__(self, argv):
    self._alternative_compiler = ""
    self._cuda_clang_compiler = None
    self._gpu_target_arch = None
    self._forwarded_args = []
    self._keep_temporaries = False
    self._platform = None
    self._is_bootstrap = False
    self._device_header_paths = []

    self._try_get_platform_from_env()
    self._try_get_cuda_clang_compiler_from_env()
    self._try_get_gpu_target_arch_from_env()

    for arg in argv[1:]:
      if arg.startswith("--force-alternative-compiler="):
        self._alternative_compiler = self._parse_compound_argument(arg)
      elif arg.startswith("--cuda-clang-compiler="):
        self._cuda_clang_compiler = self._parse_compound_argument(arg)
      elif arg == "--keep-temporary-files":
        self._keep_temporaries = True
      elif arg == "--hipsycl-bootstrap":
        self._is_bootstrap = True
      elif arg.startswith("--hipsycl-platform="):
        platform = hipsycl_platform.from_string(self._parse_compound_argument(arg))
        if platform == None:
          raise RuntimeError("Unrecognized hipSYCL platform: " + platform)
        if self._platform != None:
          print("Overriding hipSYCL platform from system(" + self._platform + ") and using " + platform )

        self._platform = platform
      elif arg.startswith("--restrict-device-header-path=") or arg.startswith("-RDI="):
        self._device_header_paths.append(self._parse_compound_argument(arg))
      elif arg == "--help":
        print("""
--force-alternative-compiler=<compiler>  Use the specified compiler
               directly without going through the hipSYCL toolchain
--cuda-clang-compiler=<compiler>  Use an alternative version of Clang
               for compiling CUDA (defaults to the newest version of
               clang++ that can be found)
--keep-temporary-files Keep temporary files created by the hipSYCL
               source-to-source transformation; this can be useful
               for debugging
--hipsycl-bootstrap  Enter bootstrap mode; do not perform source-to-
               source transformation. This is normally only required
               when building hipSYCL itself.
--hipsycl-platform=<platform>  Build the program for the specified
               hipSYCL platform; valid values are: cuda,nvcc,rocm,cpu
--restrict-device-header-path=<path>,
-RDI=<path>    Restrict the paths in which include
               files are allowed to contain device code. Can be specified
               several times.
--help Print help message """)
        sys.exit(0)
      else:
        self._forwarded_args.append(arg)

    if self._cuda_clang_compiler == None:
      self._cuda_clang_compiler = get_first_working_command(self.clang_versions_descending)

  def _parse_compound_argument(self, arg):
    parsed_args = arg.split("=")
    if len(parsed_args) != 2:
      raise RuntimeError("Invalid argument: "+arg)
    return parsed_args[1]

  def _try_get_platform_from_env(self):
    if "HIPSYCL_PLATFORM" in os.environ:
      envconfig = os.environ["HIPSYCL_PLATFORM"]
      self._platform = hipsycl_platform.from_string(envconfig)
      if self._platform == None:
        raise RuntimeError("Invalid platform specification in HIPSYCL_PLATFORM environment variable: "
                          + envconfig)

  def _try_get_cuda_clang_compiler_from_env(self):
    if "HIPSYCL_CUDA_CLANG_COMPILER" in os.environ:
      self._cuda_clang_compiler = os.environ["HIPSYCL_CUDA_CLANG_COMPILER"]

  def _try_get_gpu_target_arch_from_env(self):
    if "HIPSYCL_GPU_ARCH" in os.environ:
      self._gpu_target_arch = os.environ["HIPSYCL_GPU_ARCH"]

  def set_platform(self, platform):
    self._platform = platform

  def use_alternative_compiler(self):
    return len(self._alternative_compiler) != 0

  def keep_temporaries(self):
    return self._keep_temporaries

  @property
  def alternative_compiler(self):
    if not self.use_alternative_compiler():
      return None
    else:
      return self._alternative_compiler

  @property
  def cuda_clang_compiler(self):
    return self._cuda_clang_compiler

  @property
  def gpu_target_arch(self):
    return self._gpu_target_arch

  @property
  def clang_versions_descending(self):
    return ["clang++-8.0","clang++-8","clang++-7.0","clang++-7",
      "clang++-6.0","clang++-6","clang++"]

  @property
  def platform(self):
    return self._platform

  @property
  def platform_needs_template_pruning(self):
    return self._platform == hipsycl_platform.CUDA_NVCC

  def is_bootstrap(self):
    return self._is_bootstrap

  @property
  def forwarded_args(self):
    return self._forwarded_args

  @property
  def syclcc_install_path(self):
    return os.path.dirname(os.path.realpath(__file__))

  @property
  def hipsycl_binary_path(self):
    return self.syclcc_install_path

  @property
  def hipsycl_install_path(self):
    hipsyclcc_path = self.syclcc_install_path
    return os.path.join(hipsyclcc_path, "..")

  @property
  def hipsycl_include_path(self):
    return os.path.join(self.hipsycl_install_path, "include")

  @property
  def hipsycl_lib_path(self):
    return os.path.join(self.hipsycl_install_path,"lib")

  @property
  def device_header_paths(self):
    return self._device_header_paths

  @property
  def hipsycl_common_arguments(self):
    args = ["-I" + self.hipsycl_include_path]

    libname = ""
    if (self._platform == hipsycl_platform.CUDA_CLANG or
        self._platform == hipsycl_platform.CUDA_NVCC):
      libname = "hipSYCL_cuda"
    elif self._platform == hipsycl_platform.ROCM:
      libname = "hipSYCL_rocm"
    elif self._platform == hipsycl_platform.HIPCPU:
      libname = "hipSYCL_cpu"
    else:
      raise RuntimeError("syclcc configuration: Invalid platform encountered: " + self._platform)

    # If we are not building hipSYCL itself, we also need to
    # link against the hipSYCL library
    if not self._is_bootstrap:
      args.append("-L" + self.hipsycl_lib_path)
      args.append("-l" + libname)

    # For CUDA, we use the bundled HIP installation
    if (self._platform == hipsycl_platform.CUDA_CLANG or
        self._platform == hipsycl_platform.CUDA_NVCC):
      if self._is_bootstrap:
        bundled_hip_preinstall_path = os.path.join(self.hipsycl_install_path,
                                      "contrib/HIP/include")
        args.append("-I" + bundled_hip_preinstall_path)
      else:
        bundled_hip_install_path = os.path.join(self.hipsycl_include_path,
                                      "hipSYCL")
        args.append("-I" + bundled_hip_install_path)
    elif self._platform == hipsycl_platform.HIPCPU:
      args.append("-I" + os.path.join(self.hipsycl_include_path,
                                      "hipSYCL"))

    return args


if __name__ == '__main__':
  args = sys.argv

  if sys.version_info[0] < 3:
    print("syclcc requires python 3.")
    sys.exit(-1)

  try:
    if len(args) == 1:
      print("syclcc [hipSYCL] for amd and nvidia devices, Copyright (C) 2018,2019 Aksel Alpay")
      print("Usage: syclcc <options>")
    else:
      config = syclcc_config(args)

      if config.use_alternative_compiler():
        sys.exit(subprocess.call([config.alternative_compiler]
                                + config.forwarded_args))
      else:

        compilers = {
          hipsycl_platform.ROCM : hip_compiler(config),
          hipsycl_platform.CUDA_CLANG : cuda_clang_compiler(config),
          hipsycl_platform.CUDA_NVCC : cuda_nvcc_compiler(config),
          hipsycl_platform.HIPCPU : hipcpu_compiler(config)
        }

        compiler_available = {}
        for platform in compilers:
          compiler_available[platform] = compilers[platform].is_available()

        selected_platform = config.platform
        if selected_platform != None:
          # Make sure that the platform desired by the user is actually available
          if not compiler_available[selected_platform]:
            print("The platform " + selected_platform + " was explicitly chosen, but it is not available.")
            if selected_platform == hipsycl_platform.HIPCPU:
              print("Note: For hipCPU, try setting the CXX environment variable to the correct C++ compiler")
            sys.exit(-1)

        # If no platform has been selected in the configuration,
        # find the first available platform, if there is only one available
        if selected_platform == None:
          for platform in compilers:
            if compiler_available[platform]:
              if selected_platform == None:
                selected_platform = platform
              else:
                # We have already found a working platform in a previous iteration
                print("Several platforms are available, but no platforms has been explicitly chosen.")
                print("Please use the HIPSYCL_PLATFORM environment variable or the --hipsycl-platform= argument.")
                sys.exit(-1)

        # We couldn't find any available platforms - panic!
        if selected_platform == None:
          print("No available hipSYCL platforms found - neither CUDA, ROCm nor hipCPU are available")
          sys.exit(-1)

        selected_compiler = compilers[selected_platform]

        if selected_compiler == None:
          print("Could not select compiler - this is a bug")
          sys.exit(-1)

        config.set_platform(selected_platform)
        sys.exit(selected_compiler.run(config.forwarded_args))
  except Exception as e:
    print("syclcc fatal error: "+str(e))
    sys.exit(-1)
